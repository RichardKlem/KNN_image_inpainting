import argparse

def init_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', required=True, type=str, help='File with the results generated by gui.py.')
    parser.add_argument('--remove-undecided', default=False, action='store_true', help='If passed, then images with the same amount of votes won\'t be counted.')
    parser.add_argument('--in-images', default=False, action='store_true', help='The statistics will be counted on images, not votes.')
    return parser


def remove_undecided(baseline, modified):
    baseline_original = baseline.copy()

    for image in baseline_original.keys():
        if (image in modified) and (baseline[image] == modified[image]):
            del baseline[image]
            del modified[image]

    return baseline, modified


if __name__ == '__main__':
    parser = init_parser()
    args = parser.parse_args()

    baseline = {}
    modified = {}

    with open(args.file) as file:
        for line in file:
            line = line.rstrip()
            if line[-1] == '0':
                continue

            image_path = line.split('\t\t ')[0]
            image_name = image_path.split('/')[-1]
            model_type = image_path.split('/')[-2]

            if model_type == 'baseline':
                if image_name in baseline:
                    baseline[image_name] = baseline[image_name] + 1
                else:
                    baseline[image_name] = 1
            elif model_type == 'modified':
                if image_name in modified:
                    modified[image_name] = modified[image_name] + 1
                else:
                    modified[image_name] = 1

    if args.remove_undecided:
        baseline, modified = remove_undecided(baseline, modified)

    if args.in_images:
        # count stats on images
        all_images = set(list(baseline.keys()) + list(modified.keys()))
        all_image_cnt = len(all_images)

        modified_wins = [ x for x in modified.keys() if (x not in baseline) or (modified[x] > baseline[x]) ]
        modified_wins_cnt = len(modified_wins)

        baseline_wins = [ x for x in baseline.keys() if (x not in modified) or (baseline[x] > modified[x]) ]
        baseline_wins_cnt = len(baseline_wins)

        all_images_cnt = modified_wins_cnt + baseline_wins_cnt

        print("Baseline better images:             %d (%.2f %%)" % (baseline_wins_cnt, (baseline_wins_cnt/all_images_cnt*100)))
        print("Edge discriminator better images:   %d (%.2f %%)" % (modified_wins_cnt, (modified_wins_cnt/all_images_cnt*100)))
    else:
        # count stats on votes
        modified_votes = [ modified[x] for x in modified.keys() ]
        modified_votes_cnt = sum(modified_votes)

        baseline_votes = [ baseline[x] for x in baseline.keys() ]
        baseline_votes_cnt = sum(baseline_votes)

        all_votes = baseline_votes_cnt + modified_votes_cnt

        print("Baseline votes:             %d (%.2f %%)" % (baseline_votes_cnt, (baseline_votes_cnt/all_votes*100)))
        print("Edge discriminator votes:   %d (%.2f %%)" % (modified_votes_cnt, (modified_votes_cnt/all_votes*100)))
